(define LVal '(1 2 3 4 5 6 7 8 9 10 25 50 75 100))
(define Op '(+ * - /))
(define (make-cible) (+ (random 899) 100))
(define (make-tirage n) (if (= n 0)
                            '()
                            (cons (list-ref LVal (random (length LVal)))
                                       (make-tirage (- n 1)))))
(define (estDans? n L) (ormap (lambda (e) (= e n)) L))
(define (estValide? op a b) (let ((c (op a b)))
                              (if (and (>= c 0) (integer? c))
                                  #t
                                  #f)))
(define (opere operator a b) (map (lambda (e) (if (estValide? ((eval e) b a)) ((eval e) b a) #f)) operator))
(define (genere-plaque operator L) (letrec ((aux1 (lambda (l n)
                                                   (if (= n 0)
                                                       '()
                                                       (cons (list (car l)
                                                                   (list-ref L (- (length L) n)))
                                                             (aux1 l (- n 1))))))
                                            (aux2 (lambda (liste m) (if (= m 0)
                                                                        '()
                                                                        (append (aux1 liste m)
                                                                              (aux2 (cdr liste) (- m 1)))))))
                                     (aux2 L (length L))))
